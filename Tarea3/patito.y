%start PROGRAMA
%token COLON_SIGN SEMI_COLON COMMA INTEGER FLOAT LEFT_BRACKET RIGHT_BRACKET EQUALS PRINT LEFT_PARENTHESIS RIGHT_PARENTHESIS PERIOD ADDITION SUBSTRACTION MULTIPLICATION DIVISION IF_CLAUSE ELSE_CLAUSE PROGRAM IDENTIFIER VARIABLE STRING CTE_L CTE_F GT LT DIFFERENT
%{
void yyerror (char *s);
#include <stdio.h>
#include <stdlib.h>
%}

%%
PROGRAMA	: PROGRAM IDENTIFIER SEMI_COLON PROG1		{printf("apropiado\n"); exit(EXIT_SUCCESS);}
			;
PROG1		: VARS BLOQUE
			| BLOQUE
			;

VARS		: VARIABLE VARS1
			;
VARS1		: IDENTIFIER VARS2
			;
VARS2		: COMMA VARS1
			| COLON_SIGN TIPO SEMI_COLON VARS1
			| COLON_SIGN TIPO SEMI_COLON
			;

TIPO		: INTEGER
			| FLOAT
			;

BLOQUE		: LEFT_BRACKET BLO1
			| LEFT_BRACKET RIGHT_BRACKET
			;
BLO1		: ESTATUTO BLO1 
			| ESTATUTO RIGHT_BRACKET
			;

ESTATUTO	: ASIGNACION
			| CONDICION
			| ESCRITURA
			;

ASIGNACION	: IDENTIFIER EQUALS EXPRESION SEMI_COLON
			;

ESCRITURA	: PRINT LEFT_PARENTHESIS ESCRI1
			;
ESCRI1		: EXPRESION PERIOD ESCRI1
			| STRING PERIOD ESCRI1
			| EXPRESION ESCRI2
			| STRING ESCRI2
			;
ESCRI2		: RIGHT_PARENTHESIS SEMI_COLON
			;

EXP 		: TERMINO
			| TERMINO EXP1
			;
EXP1		: ADDITION EXP
			| SUBSTRACTION EXP
			;

TERMINO 	: FACTOR
			| FACTOR TER1
			;
TER1		: MULTIPLICATION TERMINO
			| DIVISION TERMINO
			;

CONDICION	: IF_CLAUSE LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BLOQUE SEMI_COLON
			| IF_CLAUSE LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS BLOQUE ELSE_CLAUSE BLOQUE SEMI_COLON
			;

FACTOR		: LEFT_PARENTHESIS EXPRESION RIGHT_PARENTHESIS
			| FACT1
			;
FACT1		: ADDITION VAR_CTE
			| SUBSTRACTION VAR_CTE
			| VAR_CTE
			;

VAR_CTE		: IDENTIFIER
			| CTE_L
			| CTE_F
			;

EXPRESION	: EXP EXPRE1
			| EXP
			;
EXPRE1		: GT EXP
			| LT EXP
			| DIFFERENT EXP
			;

%%
int main(void) {
	return yyparse();
}
void yyerror(char *s) {
	fprintf (stderr, "%s\n", s);
}